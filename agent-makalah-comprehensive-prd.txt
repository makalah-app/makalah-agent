# Product Requirements Document (PRD) for Agent-Makalah Backend System

## 1. Project Overview

**Project Name:** Agent-Makalah Backend System
**Version:** 1.0 MVP
**Author:** Erik Supit
**Date:** January 2025

### 1.1 Product Vision
Agent-Makalah is an innovative AI-powered academic writing assistant designed to transform the academic paper writing and analysis process. Unlike traditional AI writing tools that act as mere "paper jockeys," Agent-Makalah aims to be a collaborative sparring partner, enhancing users' critical reasoning skills while providing verifiable evidence of their active intellectual involvement.

### 1.2 Target Audience
- University students (undergraduate and postgraduate)
- Researchers and academics
- Academic professionals writing in Bahasa Indonesia
- Initial target: 1,000 users

### 1.3 Core Problems Addressed
1. **Difficulty in producing high-quality, human-like academic prose** in Bahasa Indonesia
2. **Lack of structured guidance** in the academic writing process
3. **Risk of over-reliance** and stifled critical thinking
4. **Absence of verifiable user involvement** and accountability
5. **Inefficiency in iterative refinement** and collaboration

## 2. System Architecture & Technology Stack

### 2.1 Core Framework
- **Agent Development Kit:** Google Agent Development Kit (ADK)
- **Programming Language:** Python 3.9+
- **Web Framework:** FastAPI
- **Cloud Provider:** Google Cloud Platform (GCP)

### 2.2 Multi-Agent Architecture
The system implements a sophisticated multi-agent architecture with the following specialized agents:

#### 2.2.1 Orchestrator_Agent
- **Role:** Central controller and workflow coordinator
- **Responsibilities:**
  - Receive and parse user requests
  - Manage interactive clarification dialogues
  - Coordinate sub-agent tasks
  - Handle user validation and revision loops
  - Present final products to users
  - Maintain session state and context

#### 2.2.2 Brainstorming_Agent
- **Role:** Topic ideation and exploration
- **Responsibilities:**
  - Generate creative topic ideas
  - Facilitate brainstorming sessions
  - Refine and finalize paper topics
  - Provide inspiration through web research

#### 2.2.3 Literature_Search_Agent
- **Role:** Academic literature research
- **Responsibilities:**
  - Search academic databases and sources
  - Curate relevant literature
  - Generate formatted citations
  - Provide literature summaries and metadata

#### 2.2.4 Outline_Draft_Agent
- **Role:** Structure and outline development
- **Responsibilities:**
  - Create logical paper structures
  - Develop detailed outlines
  - Generate initial draft points
  - Ensure academic formatting standards

#### 2.2.5 Writer_Agent
- **Role:** Content generation and prose writing
- **Responsibilities:**
  - Generate section-by-section content
  - Adhere to academic style guidelines
  - Produce human-like, sophisticated prose
  - Maintain consistency across sections

#### 2.2.6 Analysis_Editor_Agent
- **Role:** Document analysis and feedback
- **Responsibilities:**
  - Analyze existing academic documents
  - Provide structured feedback reports
  - Extract specific information as requested
  - Assess structural integrity and argument strength

### 2.3 Data Management & Storage
- **Relational Database:** PostgreSQL (via Supabase)
  - Conversation history
  - Agent states and metadata
  - Session management
  - Intermediate artifacts
- **Object Storage:** Google Cloud Storage (GCS)
  - User-uploaded files (PDF, DOCX, TXT)
  - Temporary file processing
- **Caching Layer:** Redis (via Upstash)
  - Session data caching
  - Performance optimization
  - Rate limiting

### 2.4 External Integrations
- **LLM Providers:** 
  - Google Gemini API (Primary)
  - OpenAI API (Fallback/Alternative)
- **Web Search:** Serper API (Primary), Google Search API (Fallback)
- **File Processing:** PyPDF2, python-docx libraries

### 2.5 Deployment & Infrastructure
- **Containerization:** Docker
- **Compute Services:** Google Cloud Run (serverless)
- **Monitoring:** Google Cloud Monitoring & Logging
- **CI/CD:** GitHub Actions / Google Cloud Build

## 3. Core Features & Workflows

### 3.1 New Academic Paper Creation (End-to-End Workflow)
**Primary SOP:** Complete guided workflow from concept to final paper

**Workflow Steps:**
1. **Topic Ideation & Finalization**
   - Interactive brainstorming with Brainstorming_Agent
   - Topic exploration and refinement
   - Final topic validation by user

2. **Literature Search & Curation**
   - Comprehensive academic literature search
   - Relevant source identification
   - Citation formatting and metadata extraction
   - Literature summary generation

3. **Outline & Structure Development**
   - Logical paper structure creation
   - Detailed outline development
   - Section planning and organization

4. **Section-by-Section Content Generation**
   - Introduction, Literature Review, Methodology
   - Findings, Discussion, Conclusion
   - Adherence to academic style guidelines
   - Human-like prose generation

5. **Final Assembly**
   - Complete paper compilation
   - Unified bibliography creation
   - Final formatting and presentation

### 3.2 Existing Paper Analysis & Feedback
**Primary SOP:** Document analysis and constructive feedback

**Workflow Steps:**
1. **Document Upload & Processing**
   - Secure file upload (PDF, DOCX, TXT)
   - Text extraction and preprocessing
   - Document structure analysis

2. **Configurable Analysis**
   - User-specified analysis criteria
   - Structural integrity assessment
   - Argument strength evaluation
   - Style adherence checking

3. **Detailed Report Generation**
   - Comprehensive analysis report
   - Improvement recommendations
   - Specific information extraction

### 3.3 Interactive User Engagement Features
- **Rigorous Clarification Dialogues:** Proactive questioning to ensure precise inputs
- **User Validation Loops:** Explicit approval/revision cycles at critical stages
- **Progress Communication:** Clear status updates throughout workflows
- **Revision Management:** Limited iteration cycles (max 3 attempts per stage)

## 4. Academic Style & Quality Standards

### 4.1 Bahasa Indonesia Academic Writing Standards
- Strict adherence to Indonesian academic conventions
- Natural, sophisticated prose generation
- Avoidance of robotic or predictable patterns
- Cultural and linguistic nuance preservation

### 4.2 Quality Assurance
- Human-like output that passes academic scrutiny
- Consistent style across all generated content
- Proper citation and referencing formats
- Academic integrity maintenance

## 5. User Interaction & Accountability

### 5.1 Interactive Interrogation Method
- **Purpose:** Reduce hallucination, ensure user accountability, foster intellectual development
- **Implementation:** Proactive questioning by Orchestrator_Agent
- **Benefits:** 
  - Minimizes AI guesswork
  - Ensures active user participation
  - Develops critical thinking skills

### 5.2 Comprehensive Work Traceability
- **Complete Interaction History:** Every user input and agent output logged
- **Validation Decision Tracking:** All approval/rejection decisions recorded
- **Revision Loop Documentation:** Complete revision history maintained
- **Accountability Evidence:** Verifiable proof of user intellectual engagement

## 6. Technical Requirements

### 6.1 Functional Requirements

#### 6.1.1 User Interaction Management
- REQ-UI-001: Receive and parse user requests
- REQ-UI-002: Initiate intent clarification dialogues
- REQ-UI-003: Manage validation and revision loops
- REQ-UI-004: Present final assembled documents
- REQ-UI-005: Maintain conversation context and session state

#### 6.1.2 Multi-Agent Orchestration
- REQ-MA-001: Coordinate tasks between specialized agents
- REQ-MA-002: Manage inter-agent communication
- REQ-MA-003: Handle agent state persistence
- REQ-MA-004: Implement workflow management

#### 6.1.3 Content Generation
- REQ-CG-001: Generate human-like academic prose
- REQ-CG-002: Adhere to Bahasa Indonesia academic standards
- REQ-CG-003: Maintain consistency across sections
- REQ-CG-004: Support iterative refinement

#### 6.1.4 Document Processing
- REQ-DP-001: Handle file uploads (PDF, DOCX, TXT)
- REQ-DP-002: Extract and process document content
- REQ-DP-003: Generate analysis reports
- REQ-DP-004: Support configurable analysis criteria

### 6.2 Non-Functional Requirements

#### 6.2.1 Performance
- Response time: < 5 seconds for interactive dialogues
- File processing: < 30 seconds for standard documents
- Scalability: Support 1,000 concurrent users
- Auto-scaling capabilities via Cloud Run

#### 6.2.2 Security & Privacy
- Data encryption at rest and in transit
- Secure file upload and storage
- User privacy compliance
- Sandboxed tool execution

#### 6.2.3 Reliability
- 99.5% uptime target
- Graceful error handling and recovery
- Comprehensive logging and monitoring
- Fallback mechanisms for external services

#### 6.2.4 Usability
- Intuitive conversational interface
- Clear progress indicators
- Comprehensive error messages
- Consistent agent behavior

## 7. Integration Specifications

### 7.1 Google ADK Integration
- **Agent Definition:** Utilize ADK's agent framework
- **State Management:** Leverage ADK's session management
- **Tool Integration:** Implement custom tools within ADK
- **Orchestration:** Use ADK's multi-agent coordination

### 7.2 LLM Integration Strategy
- **Primary Provider:** Google Gemini API
- **Fallback Provider:** OpenAI API
- **Prompt Management:** Structured prompt templates
- **Response Processing:** Standardized output parsing

### 7.3 Database Schema Requirements
- **User Sessions:** Session ID, user context, timestamps
- **Conversation History:** Complete interaction logs
- **Agent States:** Persistent agent memory and context
- **Artifacts:** Intermediate outputs and validations
- **File Metadata:** Upload information and processing status

## 8. Development Phases

### 8.1 Phase 1: Core Infrastructure (Weeks 1-2)
- FastAPI backend setup
- PostgreSQL database configuration
- Google Cloud deployment pipeline
- Basic authentication and session management

### 8.2 Phase 2: ADK Agent Framework (Weeks 3-4)
- Orchestrator_Agent implementation
- Basic multi-agent communication
- Session state management
- Error handling framework

### 8.3 Phase 3: Specialized Agents (Weeks 5-7)
- Brainstorming_Agent development
- Literature_Search_Agent implementation
- Outline_Draft_Agent creation
- Writer_Agent development
- Analysis_Editor_Agent implementation

### 8.4 Phase 4: Workflow Integration (Weeks 8-9)
- End-to-end paper creation workflow
- Document analysis workflow
- User validation and revision loops
- Interactive clarification system

### 8.5 Phase 5: Testing & Optimization (Weeks 10-11)
- Comprehensive testing suite
- Performance optimization
- Security hardening
- Documentation completion

### 8.6 Phase 6: Deployment & Launch (Week 12)
- Production deployment
- Monitoring setup
- User acceptance testing
- MVP launch

## 9. Success Metrics

### 9.1 Technical Metrics
- System uptime: 99.5%
- Average response time: < 5 seconds
- Error rate: < 1%
- User session completion rate: > 80%

### 9.2 Quality Metrics
- Academic prose quality assessment
- User satisfaction scores
- Revision cycle efficiency
- Content originality verification

### 9.3 User Engagement Metrics
- Active user count
- Session duration
- Feature utilization rates
- User retention rates

## 10. Risk Mitigation

### 10.1 Technical Risks
- **LLM API Failures:** Multiple provider fallbacks
- **Scalability Issues:** Cloud Run auto-scaling
- **Data Loss:** Comprehensive backup strategies
- **Security Breaches:** Multi-layer security implementation

### 10.2 Quality Risks
- **Content Quality:** Rigorous testing and validation
- **Academic Standards:** Expert review processes
- **User Experience:** Iterative design improvements
- **Performance Degradation:** Continuous monitoring

## 11. Future Considerations

### 11.1 Post-MVP Enhancements
- Vector database integration for semantic search
- Advanced knowledge graph features
- Multi-language support expansion
- Enhanced collaboration features

### 11.2 Scalability Improvements
- Microservices architecture evolution
- Advanced caching strategies
- Load balancing optimization
- Global deployment considerations

This comprehensive PRD serves as the foundation for developing the Agent-Makalah backend system, ensuring all stakeholders have a clear understanding of the project scope, technical requirements, and implementation strategy. 